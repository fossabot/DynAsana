<?xml version="1.0"?>
<doc>
    <assembly>
        <name>DynaSlack</name>
    </assembly>
    <members>
        <member name="T:DynaSlack.Properties.Resources">
            <summary>
              A strongly-typed resource class, for looking up localized strings, etc.
            </summary>
        </member>
        <member name="P:DynaSlack.Properties.Resources.ResourceManager">
            <summary>
              Returns the cached ResourceManager instance used by this class.
            </summary>
        </member>
        <member name="P:DynaSlack.Properties.Resources.Culture">
            <summary>
              Overrides the current thread's CurrentUICulture property for all
              resource lookups using this strongly typed resource class.
            </summary>
        </member>
        <member name="P:DynaSlack.Properties.Resources.add_to_slack">
            <summary>
              Looks up a localized resource of type System.Drawing.Bitmap.
            </summary>
        </member>
        <member name="P:DynaSlack.Properties.Resources.slack">
            <summary>
              Looks up a localized resource of type System.Drawing.Bitmap.
            </summary>
        </member>
        <member name="T:Web.Request">
            <summary>
            Utility class used to construct a web request and send it
            </summary>
        </member>
        <member name="M:Web.Request.POST(System.String,System.String)">
            <summary>
            Utility function to send a POST request to a URL using a "payload" request parameter
            </summary>
            <param name="url">The string URL to send request to</param>
            <param name="jsonPayload">The POST data to send in JSON format</param>
            <returns>The server response as a string</returns>
        </member>
        <member name="T:Web.Response">
            <summary>
            Class that Slack's web responses deserialize to
            </summary>
        </member>
        <member name="T:Web.Helpers">
            <summary>
            Utility functions that are used for validation and other auxiliary tasks
            </summary>
        </member>
        <member name="M:Web.Helpers.checkURI(System.Uri)">
            <summary>Check the URI is valid</summary>
            <param name="uriToCheck">The URI to check</param>
            <returns>True if is valid, False otherwise</returns>
        </member>
        <member name="T:Slack.Message">
            <summary>
            Class represents a Slack message.
            </summary>
        </member>
        <member name="M:Slack.Message.#ctor(System.String)">
            <summary>
            Construct a Slack message given a text and an optional attachment
            </summary>
            <param name="Text">The text to be sent as a Slack message</param>
        </member>
        <member name="M:Slack.Message.ToJSON">
            <summary>
            Serializes the Slack message to JSON
            </summary>
            <returns></returns>
        </member>
        <member name="M:Slack.Message.Post(Slack.Client)">
            <summary>
            Posts the message to Slack on behalf of the Slack Client's user. Requires a valid OAuth token in Client.
            </summary>
            <returns></returns>
        </member>
        <member name="T:Slack.Bot">
            <summary>
            Class represents a Bot object in Slack.
            </summary>
        </member>
        <member name="T:Slack.Webhook">
            <summary>
            Class represents an Incoming Webhook connection in Slack
            </summary>
        </member>
        <member name="M:Slack.Webhook.#ctor(System.String,System.String,System.String,System.String,System.String)">
            <summary>
            Create a webhook for use with Slack.
            </summary>
            <param name="Url">The URL to send data to</param>
            <param name="Channel">The Slack channel to post to, defaults to #general</param>
            <param name="User">The name of the user to post as</param>
            <param name="EmojiIcon">The emoji to use as icon. Uses Slack syntax, like :ghost: or :rocket:</param>
            <param name="UrlIcon">An URL to an image to use as the icon.</param>
        </member>
        <member name="M:Slack.Webhook.Post(System.String)">
            <summary>
            Post a message using webhooks
            </summary>
            <param name="webhook">Specify a webhook object to use. If nothing is supplied, it defaults to the Client's webhook.</param>
            <param name="text">The text to send</param>
            <returns>The message JSON payload</returns>
        </member>
        <member name="T:Slack.Attachment">
            <summary>
            Represents attachments in Slack messages, which are used to send richly formatted messages.
            </summary>
        </member>
        <member name="M:Slack.Attachment.#ctor(System.String,System.String,System.String,System.String,System.String)">
            <summary>
            Create a Slack message attachment, which are used to send richly formatted messages.
            </summary>
        </member>
        <member name="T:Slack.Field">
            <summary>
            Represents individual fields which form attachments in Slack messages.
            </summary>
        </member>
        <member name="T:Slack.SlackPayload">
            <summary>
            This class serializes to JSON the payload required by Slack Incoming WebHooks
            </summary>
        </member>
        <member name="T:Slack.Client">
            <summary>
            Slack clients represent a single connection to a Slack team, with all associated properties and methods.
            </summary>
        </member>
        <member name="M:Slack.Client.#ctor(System.String,Slack.Webhook)">
            <summary>
            Slack client constructor
            </summary>
            <param name="token">Optional OAuth token. If not supplied or invalid, posting will only be available as bots or webhooks.</param>
            <param name="webhook">Optional webhook override. If supplied, this will be used instead of OAuth webhook.</param>
        </member>
        <member name="M:Slack.Client.PostWebhookMessage(System.String,System.String)">
            <summary>
            Post a message using the client webhook
            </summary>
            <param name="text">The text to send</param>
            <returns>The message JSON payload</returns>
        </member>
        <member name="M:Slack.Client.CheckToken(System.String)">
            <summary>
            Checks whether an OAuth token is valid
            </summary>
            <param name="token">The token to check</param>
            <returns>True if token is valid and false otherwise</returns>
        </member>
    </members>
</doc>
